buildscript {
    repositories {
        jcenter()
        //mavenCentral()
        maven {
            url "https://maven.google.com"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
    }
    System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'
}

allprojects {
    repositories {
        jcenter()
        //mavenCentral()
        maven {
            url 'https://download.01.org/crosswalk/releases/crosswalk/android/maven2'
        }
        maven {
            url "https://maven.google.com"
        }
        maven {
            url "http://dl.bintray.com/openid/net.openid"
        }
        flatDir {
            dirs 'ForgeModule/libs'
        }
    }
}

ext {
    compileSdkVersion = 26
    buildToolsVersion = "26.0.1"
    supportLibraryVersion = "26.0.1"
    crosswalkVersion = "23.53.589.4"

    minSdkVersion = moduleMinSdkVersion() ?: 14
    targetSdkVersion = 26

    compileOptions = {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    debug = {
        debuggable true
        minifyEnabled false
        shrinkResources false
    }
    release = {
        debuggable false
        minifyEnabled true
        shrinkResources false
    }
}

task getHomeDir << {
    println gradle.gradleHomeDir
}

import groovy.json.JsonSlurper
def moduleDependencies() {
    def f = new File("ForgeInspector/gradle.json")
    if (f.exists()) {
        def jsonSlurper = new JsonSlurper()
        def config = jsonSlurper.parseText(f.text)
        config["dependencies"] ?: []
    } else {
        []
    }
}

def moduleExcludeJars() {
    def f = new File("ForgeInspector/gradle.json")
    if (f.exists()) {
        def jsonSlurper = new JsonSlurper()
        def config = jsonSlurper.parseText(f.text)
        config["exclude_jars"] ?: []
    } else {
        []
    }
}

def moduleManifestPlaceholders() {
    def f = new File("ForgeInspector/gradle.json")
    if (f.exists()) {
        def jsonSlurper = new JsonSlurper()
        def config = jsonSlurper.parseText(f.text)
        config["manifestPlaceholders"] ?: [:]
    } else {
        [:]
    }
}

def moduleMinSdkVersion() {
    def f = new File("ForgeInspector/gradle.json")
    if (f.exists()) {
        def jsonSlurper = new JsonSlurper()
        def config = jsonSlurper.parseText(f.text)
        config["minSdkVersion"] ?: null
    } else {
        null
    }
}
